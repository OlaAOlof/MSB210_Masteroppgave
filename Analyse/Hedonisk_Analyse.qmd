---
title: "Masteroppgave"
author: 
  Kevin Ha
  Ola Andre Olofsson
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

# Setup Chunk

```{r setup_base}
library(readr)
library(tidyverse)
library(dplyr)
library(lubridate)
#library(zoo)
library(sf)
library(sp)
library(spdep)
library(tmap)
library(spatialreg)
#library(magrittr)
#library(measurements)
library(tibble)
library(ggcorrplot)
library(huxtable)
library(plm)
library(car)
library(lmtest)
library(magick)
library(olsrr)
library(vip)
library(xgboost)
library(ranger)
library(rpart)
library(lavaan)
library(strucchange)
options(paged.print = FALSE)
```

# Leser inn datasettene for analyse

```{r Innlesing av data}
Analyse <- suppressWarnings(read_csv("Datasett_Analyse.csv")) %>% 
  select(-...1)
Analyse_sf <- suppressWarnings(st_read("Datasett_Analyse_sf.gpkg"))
Analyse_Shape <- suppressWarnings(read_sf("Analyse_Shape.shp"))
```

```{r Navngir shp}
shp <- "Analyse_Shape.shp"
class(st_geometry(st_read(shp, quiet = TRUE, type = 3)))
```

```{r Gjør variabler numerisk}
Analyse_sf <- transform(Analyse_sf, EiendomAreal = as.numeric(EiendomAreal))
Analyse_sf <- transform(Analyse_sf, BRA.Bolig = as.numeric(BRA.Bolig))
Analyse_sf <- transform(Analyse_sf, BRA.Tot = as.numeric(BRA.Tot))
Analyse_sf <- transform(Analyse_sf, BebygdAreal = as.numeric(BebygdAreal))
Analyse_sf <- transform(Analyse_sf, Bruksareal.Enhet = as.numeric(Bruksareal.Enhet))
```

Analyse_sf \<- suppressWarnings(st_read("Datasett_Analyse_sf.gpkg"))

```{r}
#Bolig_sf <- suppressWarnings(st_read("Bolig_Inkludert_Bergen.gpkg"))
#Bolig_Eksl_Bergen_sf <- suppressWarnings(st_read("Bolig_Ekskludert_Bergen.gpkg"))
Blokker_sf <- suppressWarnings(st_read("Blokker_Inkludert_Bergen.gpkg"))
Blokker_Eksl_Bergen_sf <- suppressWarnings(st_read("Blokker_Ekskludert_Bergen.gpkg"))
```

```{r}
#Bolig_sf <- transform(Bolig_sf, EiendomAreal = as.numeric(EiendomAreal))
#Bolig_sf <- transform(Bolig_sf, BebygdAreal = as.numeric(BebygdAreal))
#Bolig_Eksl_Bergen_sf <- transform(Bolig_Eksl_Bergen_sf, EiendomAreal = as.numeric(EiendomAreal))
#Bolig_Eksl_Bergen_sf <- transform(Bolig_Eksl_Bergen_sf, BebygdAreal = as.numeric(BebygdAreal))
Blokker_sf <- transform(Blokker_sf, EiendomAreal = as.numeric(EiendomAreal))
Blokker_sf <- transform(Blokker_sf, BebygdAreal = as.numeric(BebygdAreal))
Blokker_Eksl_Bergen_sf <- transform(Blokker_Eksl_Bergen_sf, EiendomAreal = as.numeric(EiendomAreal))
Blokker_Eksl_Bergen_sf <- transform(Blokker_Eksl_Bergen_sf, BebygdAreal = as.numeric(BebygdAreal))
```

```{r}
#Bolig <- read.csv("Bolig_Inkludert_Bergen.csv")
#Bolig_Eksl_Bergen <- read.csv("Bolig_Ekskludert_Bergen.csv")
#Blokker <- read.csv("Blokker_Inkludert_Bergen.csv")
#Blokker_Eksl_Bergen <- read.csv("Blokker_Ekskludert_Bergen.csv")
```

# Legg til KPI i datasettet

```{r}
Analyse_sf <- Analyse_sf %>%
  mutate(KPI = case_when(
    DokumentAr == 2019 ~ 1 + 0.022,
    DokumentAr == 2020 ~ 1 + 0.022 + 0.013,
    DokumentAr == 2021 ~ 1 + 0.022 + 0.013 + 0.035,
    DokumentAr == 2022 ~ 1 + 0.022 + 0.013 + 0.035 + 0.058,
    TRUE ~ 1
  ))

# Beregn justerte priser
Analyse_sf <- Analyse_sf %>%
  mutate(justert_pm2 = pm2 * KPI) %>% 
  relocate(justert_pm2, .after = pm2)
```

```{r}
Analyse_sf <- Analyse_sf %>% 
  select(KPI, everything())
```

```{r}
Analyse_sf <- Analyse_sf %>% 
  select(DokumentAr, everything())
```

```{r}
Analyse_sf <- Analyse_sf %>% 
  select(-pm2)
```

```{r}
colnames(Analyse_sf)[colnames(Analyse_sf) == "justert_pm2"] <- "pm2"
```


# Fjerner SNR = 0

```{r SNR>0}
Analyse <- Analyse %>% 
  filter(Snr > 0)

Analyse_sf <- Analyse_sf %>% 
  filter(Snr > 0)

Blokker_sf <- Blokker_sf %>% 
  filter(Snr > 0)

#Bolig_sf <- Bolig_sf %>% 
#  filter(Snr > 0)

Blokker_Eksl_Bergen_sf <- Blokker_Eksl_Bergen_sf %>% 
  filter(Snr > 0)

#Bolig_Eksl_Bergen_sf <- Bolig_Eksl_Bergen_sf %>% 
#  filter(Snr > 0)
```

# Fjerner uteligger 1616

```{r}
Analyse_sf <- Analyse_sf[-1616,]
```

```{r}
Analyse <- Analyse[-1616,]
```

```{r}
Blokker_sf <- Blokker_sf[-1616,]
```

# Summary av datasettene

```{r Summary Analyse}
#summary(Analyse)
#summary(Analyse_sf)
```

# Lager en kolonne med kommune navn

```{r Mutater_Kommuner, eval=FALSE}
Analyse_sf <- Analyse_sf %>% 
  mutate(Kommune = recode(Knr,
                          4601 = "Bergen",
                          4624 = "Bjornafjorden",
                          4626 = "Oygarden",
                          4627 = "Askoy",
                          4628 = "Vaksdal",
                          4630 = "Osteroy",
                          4631 = "Alver",
                          4632 = "Austrheim"))
```

```{r}
Analyse_sf <- Analyse_sf %>%
  mutate(Kommune = case_when(
    Knr == 4601 ~ "Bergen",
    Knr == 4624 ~ "Bjornafjorden",
    Knr == 4626 ~ "Oygarden",
    Knr == 4627 ~ "Askoy",
    Knr == 4628 ~ "Vaksdal",
    Knr == 4630 ~ "Osteroy",
    Knr == 4631 ~ "Alver",
    Knr == 4632 ~ "Austrheim",
    TRUE ~ "Unknown"
  )) %>%
  relocate(Kommune, .before = Knr)
```

```{r}
Analyse <- Analyse %>%
  mutate(Kommune = case_when(
    Knr == 4601 ~ "Bergen",
    Knr == 4624 ~ "Bjornafjorden",
    Knr == 4626 ~ "Oygarden",
    Knr == 4627 ~ "Askoy",
    Knr == 4628 ~ "Vaksdal",
    Knr == 4630 ~ "Osteroy",
    Knr == 4631 ~ "Alver",
    Knr == 4632 ~ "Austrheim",
    TRUE ~ "Unknown"
  )) %>%
  relocate(Kommune, .before = Knr)
```

```{r}
Blokker_sf <- Blokker_sf %>%
  mutate(Kommune = case_when(
    Knr == 4601 ~ "Bergen",
    Knr == 4624 ~ "Bjornafjorden",
    Knr == 4626 ~ "Oygarden",
    Knr == 4627 ~ "Askoy",
    Knr == 4628 ~ "Vaksdal",
    Knr == 4630 ~ "Osteroy",
    Knr == 4631 ~ "Alver",
    Knr == 4632 ~ "Austrheim",
    TRUE ~ "Unknown"
  )) %>%
  relocate(Kommune, .before = Knr)
```

# Fikser på data før vi lager vektmatriser

```{r}
# Inkonsistens i data. Eksakt samme posisjon har forskjellig
# EiendomAdressegatenavn. EiendomAdressegatenavn er en variabel som 
# kan brukes analogt til TOWN i Boston eksempel, men da må SAMME punkt ha
# SAMME EiendomAdressegatenavn ellers får blocking rutinene problemer. Lager
# en ny variabel EAG_Blocking der dette fikses
# Lager også noen id-er for å identifisere de problematiske observasjonene
all_point_coords <- st_coordinates(Analyse_sf)
# Add id variabel made from coordinates before P in Analyse_sf
Analyse_sf <- rowid_to_column(Analyse_sf, "id")
Analyse_sf <- Analyse_sf  |> 
  mutate(
    id_adr = paste(
      EiendomAdressegatenavn,
      all_point_coords[,1], 
      all_point_coords[,2], 
      sep = "_"),
    id_coords = paste(
      all_point_coords[,1], 
      all_point_coords[,2], 
      sep = "_"),
    EAG_Blocking = EiendomAdressegatenavn,
    .before = "P"
  )

# Finner observasjonene som har SAMME koordinater, men forskjellig
# EiendomAdressegatenavn
Analyse_sf_ng <- st_drop_geometry(Analyse_sf)
duplicates_coord <- setdiff(
  Analyse_sf_ng[!duplicated(Analyse_sf_ng$id_adr),
             c("id", "id_coords")],
  Analyse_sf_ng[!duplicated(Analyse_sf_ng$id_coords),
             c("id", "id_coords")]
)

prob_obs <- Analyse_sf |> 
  filter(id_coords %in% duplicates_coord$id_coords) |> 
  arrange(id_coords, EiendomAdressegatenavn)

# I prob_obs ser vi hvilke obs. som skaper problemer
# Fikser problemet i EiendomAdressegatenavn_Blocking
Analyse_sf <- Analyse_sf |> 
  mutate(
    EAG_Blocking = case_when(
      # Endrer nattlandsrinden til nordre nattlandsfjellet
      id %in% c(82, 84, 86, 146) ~ "nordre nattlandsfjellet",
      # Endrer vallaheiane til vallalia
      id %in% c(227, 228, 233, 235) ~ "vallalia",
      # endrer koren wibergs plass til wesenbergsmauet
      id %in% c(56) ~ "wesenbergsmauet",
      # endrer jens rolfsens gate til nye sandviksveien
      id %in% c(1065) ~ "nye sandviksveien",
      # endrer michael krohns gate til damsgårdsveien
      id %in% c(435:441, 607:613) ~ "damsgårdsveien",
      # endrer johan berentsens vei til kringsjåveien
      id %in% c(865) ~ "kringsjåveien",
      # resten er uforandret
      TRUE ~ EAG_Blocking
    ),
    EAG_Blocking = paste(EAG_Blocking, id_coords, sep = "_")
  )
```

# Lager reint Bergen Datasett

```{r}
Bergen_sf <- Analyse_sf %>% 
  filter(Knr == 4601)
```

# Lager to unike punkter

## Fullstendig

### Punkt 1

```{r Punkt_1}
unike_punkt <- Analyse_sf |> 
  select(EAG_Blocking) |> 
  distinct()

rel_graph <- relativeneigh(
  coords = st_coordinates(unike_punkt),
  # scaling factor for memory allocation, 15 seems to work
  nnmult = 15
)
```

### Punkt 2

```{r Punkt_2}
# punkt 2
rel_nb <- graph2nb(
  gob = rel_graph,
  # områdenavnene, pull() for å gå fra tibbel med en var til vector
  row.names = pull(st_drop_geometry(select(unike_punkt, EAG_Blocking))),
  sym = TRUE
)
```

## Bergen Ekslusivt

### Punkt 1

```{r Punkt_1}
unike_punkt_red <- Bergen_sf |> 
  select(EAG_Blocking) |> 
  distinct()

rel_graph_red <- relativeneigh(
  coords = st_coordinates(unike_punkt_red),
  # scaling factor for memory allocation, 15 seems to work
  nnmult = 15
)
```

### Punkt 2

```{r Punkt_2}
# punkt 2
rel_nb_red <- graph2nb(
  gob = rel_graph_red,
  # områdenavnene, pull() for å gå fra tibbel med en var til vector
  row.names = pull(st_drop_geometry(select(unike_punkt_red, EAG_Blocking))),
  sym = TRUE
)
```

## Plot

### Fullstendig

```{r}
plot(rel_nb, st_coordinates(unike_punkt))
```

### Bergen

```{r}
plot(rel_nb_red, st_coordinates(unike_punkt_red))
```

# Lager Vektmatrise, hva. "nb2blocknb"-funksjon

## Fullstendig

```{r}
block.nb <- nb2blocknb(
  rel_nb, 
  # Nå alle verdier av EAG_Blocking, dvs. flere duplikater som «blocks opp»
  ID = Analyse_sf$EAG_Blocking
  )
```

```{r}
block.nb
```

```{r}
plot(block.nb, coords = st_coordinates(Analyse_sf));points(st_coordinates(unike_punkt))
```

```{r}
Analyse_w <- nb2listw(block.nb, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Analyse_sf$P, Analyse_w)
```

## Bergen

```{r}
block.nb_red <- nb2blocknb(
  rel_nb_red, 
  # Nå alle verdier av EAG_Blocking, dvs. flere duplikater som «blocks opp»
  ID = Bergen_sf$EAG_Blocking
  )
```

```{r}
block.nb_red
```

```{r}
plot(block.nb_red, coords = st_coordinates(Bergen_sf));points(st_coordinates(unike_punkt_red))
```

```{r}
Analyse_w_red <- nb2listw(block.nb_red, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Bergen_sf$P, Analyse_w_red)
```

# Lager vektmatrise, hva. knearneigh

## Fullstendig

### Knearneigh; K=3

```{r K=3}
# 3 nearest neighbours
knn_3 <- knearneigh(st_coordinates(unike_punkt), k = 3)
nb_knn3 <- knn2nb(
  knn_3, 
  row.names = pull(st_drop_geometry(select(unike_punkt, EAG_Blocking))),
  sym = TRUE
  )
block.nb_knn3 <- nb2blocknb(
  nb_knn3,
  ID = Analyse_sf$EAG_Blocking
  )
Analyse_W3 <- nb2listw(block.nb_knn3, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Analyse_sf$P, Analyse_W3)
```

```{r K=3_Block.nb}
block.nb_knn3
```

```{r K=3, plot}
plot(block.nb_knn3, coords = st_coordinates(Analyse_sf));points(st_coordinates(unike_punkt))
```

### Knearneigh; K=5

```{r K=5}
# 5 nearest neighbours
knn_5 <- knearneigh(st_coordinates(unike_punkt), k = 5)
nb_knn5 <- knn2nb(
  knn_5, 
  row.names = pull(st_drop_geometry(select(unike_punkt, EAG_Blocking))),
  sym = TRUE
  )
block.nb_knn5 <- nb2blocknb(
  nb_knn5,
  ID = Analyse_sf$EAG_Blocking
  )
Analyse_W5 <- nb2listw(block.nb_knn5, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Analyse_sf$P, Analyse_W5)
```

```{r K=5_Block.nb}
block.nb_knn5
```

```{r K=5, plot}
plot(block.nb_knn5, coords = st_coordinates(Analyse_sf));points(st_coordinates(unike_punkt))
```

### Knearneigh; K=7

```{r K=5}
# 7 nearest neighbours
knn_7 <- knearneigh(st_coordinates(unike_punkt), k = 7)
nb_knn7 <- knn2nb(
  knn_7, 
  row.names = pull(st_drop_geometry(select(unike_punkt, EAG_Blocking))),
  sym = TRUE
  )
block.nb_knn7 <- nb2blocknb(
  nb_knn7,
  ID = Analyse_sf$EAG_Blocking
  )
Analyse_W7 <- nb2listw(block.nb_knn7, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Analyse_sf$P, Analyse_W7)
```

```{r K=5_Block.nb}
block.nb_knn7
```

```{r K=5, plot}
plot(block.nb_knn7, coords = st_coordinates(Analyse_sf));points(st_coordinates(unike_punkt))
```

### Knearneigh; K=10

```{r K=10}
# 10 nearest neighbours
knn_10 <- knearneigh(st_coordinates(unike_punkt), k = 10)
nb_knn10 <- knn2nb(
  knn_10, 
  row.names = pull(st_drop_geometry(select(unike_punkt, EAG_Blocking))),
  sym = TRUE
  )
block.nb_knn10 <- nb2blocknb(
  nb_knn10,
  ID = Analyse_sf$EAG_Blocking
  )
Analyse_W10 <- nb2listw(block.nb_knn10, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Analyse_sf$P, Analyse_W10)
```

```{r K=10_Block.nb}
block.nb_knn10
```

```{r K=10, plot}
plot(block.nb_knn10, coords = st_coordinates(Analyse_sf));points(st_coordinates(unike_punkt))
```

### Knearneigh; K=15

```{r K=15, eval=FALSE}
# 15 nearest neighbours
knn_15 <- knearneigh(st_coordinates(unike_punkt), k = 15)
nb_knn15 <- knn2nb(
  knn_15, 
  row.names = pull(st_drop_geometry(select(unike_punkt, EAG_Blocking))),
  sym = TRUE
  )
block.nb_knn15 <- nb2blocknb(
  nb_knn15,
  ID = Analyse_sf$EAG_Blocking
  )
Analyse_W15 <- nb2listw(block.nb_knn15, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Analyse_sf$P, Analyse_W15)
```

```{r K=15_Block.nb, eval=FALSE}
block.nb_knn15
```

```{r K=15, plot, eval=FALSE}
plot(block.nb_knn15, coords = st_coordinates(Analyse_sf));points(st_coordinates(unike_punkt))
```

## Bergen

### Knearneigh; K=3

```{r K=3}
# 3 nearest neighbours
knn_3_red <- knearneigh(st_coordinates(unike_punkt_red), k = 3)
nb_knn3_red <- knn2nb(
  knn_3_red, 
  row.names = pull(st_drop_geometry(select(unike_punkt_red, EAG_Blocking))),
  sym = TRUE
  )
block.nb_knn3_red <- nb2blocknb(
  nb_knn3_red,
  ID = Bergen_sf$EAG_Blocking
  )
Analyse_W3_red <- nb2listw(block.nb_knn3_red, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Bergen_sf$P, Analyse_W3_red)
```

```{r K=3_Block.nb}
block.nb_knn3_red
```

```{r K=3, plot}
plot(block.nb_knn3_red, coords = st_coordinates(Bergen_sf));points(st_coordinates(unike_punkt_red))
```

### Knearneigh; K=10

```{r K=3}
# 10 nearest neighbours
knn_10_red <- knearneigh(st_coordinates(unike_punkt_red), k = 10)
nb_knn10_red <- knn2nb(
  knn_10_red, 
  row.names = pull(st_drop_geometry(select(unike_punkt_red, EAG_Blocking))),
  sym = TRUE
  )
block.nb_knn10_red <- nb2blocknb(
  nb_knn10_red,
  ID = Bergen_sf$EAG_Blocking
  )
Analyse_W10_red <- nb2listw(block.nb_knn10_red, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Bergen_sf$P, Analyse_W10_red)
```

```{r K=3_Block.nb}
block.nb_knn10_red
```

```{r K=3, plot}
plot(block.nb_knn10_red, coords = st_coordinates(Bergen_sf));points(st_coordinates(unike_punkt_red))
```

### Knearneigh; K=15

```{r K=3}
# 15 nearest neighbours
knn_15_red <- knearneigh(st_coordinates(unike_punkt_red), k = 15)
nb_knn15_red <- knn2nb(
  knn_15_red, 
  row.names = pull(st_drop_geometry(select(unike_punkt_red, EAG_Blocking))),
  sym = TRUE
  )
block.nb_knn15_red <- nb2blocknb(
  nb_knn15_red,
  ID = Bergen_sf$EAG_Blocking
  )
Analyse_W15_red <- nb2listw(block.nb_knn15_red, style = "W", zero.policy = TRUE)
# Har vi spatial autocorrelation i prisene?
moran.test(Bergen_sf$P, Analyse_W15_red)
```

```{r K=3_Block.nb}
block.nb_knn15_red
```

```{r K=3, plot}
plot(block.nb_knn15_red, coords = st_coordinates(Bergen_sf));points(st_coordinates(unike_punkt_red))
```

# Gammel kode, utgår. START

## Kontroll av nabolagsmatrise - Kevin (Gammel)

```{r Nabomatrise, eval=FALSE}}
# Funksjonen returnerer en matrise med indeksene til punktene som tilhører settet av de k nærmeste naboene til hverandre.

bergen <- st_read(("Analyse_Shape.shp"), quiet=TRUE)
coords <- st_centroid(st_geometry(bergen), of_largest_polygon=TRUE)
col.knn <- knearneigh(coords, k=3)
plot(st_geometry(bergen), border="grey")
plot(knn2nb(col.knn), coords, add=TRUE)
title(main="K naermeste naboer, k = 3")
```

Funksjonen returnerer en matrise med indeksene til punktene som tilhører settet av de k nærmeste naboene til hverandre.

```{r Nabomatrise med farger og punkt, eval=FALSE}}
# Nå plotter vi punktene og naboene for et utvalg av punkter for å se om det ser ut som om de har riktig antall naboer (k = 10).
plot(st_geometry(Analyse_sf), pch = 19, cex = 0.5, col = "blue")

# Velg et punkt for å se naboene
point_index <- 1

# Plot de valgte pointsene og naboene
plot(Analyse_sf[point_index, ], col = "red", pch = 19, cex = 1.2, add = TRUE)
plot(Analyse_sf[names(Analyse_sf_nb10[[point_index]]), ], col = "green", pch = 19, cex = 10, add = TRUE)

# Legger til beskrivelse
legend("bottomright", legend = c("Points", "Selected point", "Naboer (k = 10)"),
       col = c("blue", "red", "green"), pch = 19, cex = 0.8)
```

## Norgeskart med våre salg - Kevin (Gammel)

```{r Norgeskart, eval=FALSE}
Analyse_Shape <- st_read("Analyse_Shape.shp")
norge <- st_read("norge.shp")

Transformerer kartene til samme CRS
norge <- st_transform(norge, crs = st_crs(Analyse_Shape))

Plotter  MultiPolygon-data
ggplot() + 
  geom_sf(data = norge) +
  theme_bw()

Legger til point-data på toppen av MultiPolygon data
ggplot() + 
  geom_sf(data = norge) +
  geom_sf(data = Analyse_Shape, color = "red") +
  theme_bw()
```

# Morans I - Kevin

Disse resultatene viser Global Moran's I-verdier for k = 3, k = 5 og k = 10. Global Moran's I er et mål på romlig autokorrelasjon som gir en indikasjon på hvordan en variabel (i dette tilfellet "Pris") er korrelert med seg selv i rommet. I dette tilfellet er variabelen "Pris" korrelert med sine nærmeste naboer.

Resultatene viser følgende: Global Moran's I (k = 3): 0.3930968 Global Moran's I (k = 5): 0.3361125 Global Moran's I (k = 10): 0.2473997 Global Moran's I-verdier varierer mellom -1 og 1:

Verdier nær 1 indikerer positiv romlig autokorrelasjon, der lignende verdier er gruppert sammen i rommet. Verdier nær -1 indikerer negativ romlig autokorrelasjon, der ulike verdier er gruppert sammen i rommet. Verdier nær 0 indikerer ingen romlig autokorrelasjon, der verdier er jevnt fordelt i rommet. I dette tilfellet er alle Global Moran's I-verdier positive, noe som tyder på positiv romlig autokorrelasjon. Det betyr at høyere priser har en tendens til å være nærmere hverandre, og lavere priser har en tendens til å være nærmere hverandre i rommet.

Det er viktig å merke seg at Moran's I-verdien avtar når antall naboer (k) øker. Dette kan skyldes at når flere naboer inkluderes i analysen, blir det mindre sannsynlig at hver enhet har naboer med lignende verdier.

Tallene etter Moran's I-verdiene i resultatene (-0.0003374958 og 0.0001646533 for k = 3, osv.) er konstantleddet og koeffisienten for x i Moran's I-beregningen. Disse tallene brukes for å beregne Moran's I-verdien og er ikke av stor interesse for tolkningen av resultatene.

## Gammel kode, utgår. SLUTT

-

# Korrelasjonsmatriser

## Sjekket for korrelasjon og multikollinearitet

```{r}
correlation <- cor(Blokker_sf$O.Karak_num, Blokker_sf$pm2)

print(correlation)
```

```{r}
correlation_test <- cor.test(Blokker_sf$O.Karak_num, Blokker_sf$pm2)

print(correlation_test)
```


Sjekk korrelasjon mellom - EiendomAreal - BRA.Bolig - BRA.Annet - BRA.Tot - BebygdAreal - Bruksareal.Enhet

```{r Korrelasjonsmatrise Eiendom, eval=FALSE}
cor_matrix <- cor(Analyse[c("EiendomAreal", "BRA.Bolig", "BRA.Annet", "BRA.Tot", "BebygdAreal", "Bruksareal.Enhet")])
print(cor_matrix)
```

```{r Visualisering av korrelasjonsmatrise, eval=FALSE}
ggcorrplot(cor_matrix)
```

## Sjekker multikollinearitet

```{r lager lineær modell1, eval=FALSE}
linear_model_1 <- lm(P ~ Alder + EL.Kar + O.Karak_num + BLEnergikWh + MatValg_num + AntEiendom + EiendomAreal + BRA.Bolig + Bruksareal.Enhet + Etasje + VannkantGL + VegkantGL + BebygdAreal + RegLBE + RegGrunnforur + RegKulturEiendom + RegGrunnerverv + TotBoliger + RegKulturByg + AntallRom + AntallBad + AntallWC + PrivatEid + HarHeis + VannKode + AvlopsKode + BolType + Kjokken + YearQuarter, data = Analyse)
```

```{r Sjekker multikollinearitet i lm1, eval=FALSE}
vif_values_1 <- vif(linear_model_1)
print(vif_values_1)
```

Vi ønsker GVIF verdier så nærme 1 som mulig. Verdier mindre enn 5 er akseptable, mens verdier over 5 må kastes. Med dette i bakhånd velger vi dermed å forkaste TotBoliger variablen. Dette kommer også av at vi er interessert i kjøp av boliger, så om det er 1 eller 10 boliger som blir solgt har ikkje så mykje å si for personen som kjøper boligen.

**GVIF-Verdier på 1.02 til 1.6. Dette er variabler vi kan bruke**

```{r lager lineær modell2, eval=FALSE}
linear_model_2 <- lm(P ~ EiendomAreal + dist_cbd_km, data = Analyse_sf)
```

```{r Sjekker multikollinearitet i lm2, eval=FALSE}
vif_values_2 <- vif(linear_model_2)
print(vif_values_2)
```

```{r lager lineær modell3, eval=FALSE}
linear_model_3 <- lm(P ~ BRA.Bolig + dist_cbd_km, data = Analyse_sf)
```

```{r Sjekker multikollinearitet i lm3, eval=FALSE}
vif_values_3 <- vif(linear_model_3)
print(vif_values_3)
```

```{r lager lineær modell4, eval=FALSE}
linear_model_4 <- lm(P ~ Bruksareal.Enhet + dist_cbd_km, data = Analyse_sf)
```

```{r Sjekker multikollinearitet i lm4, eval=FALSE}
vif_values_4 <- vif(linear_model_4)
print(vif_values_4)
```

## VIF for modellene våres

### VIF, Full Modell

```{r lager lineær modell5}
linear_model_5 <- lm(pm2 ~ Alder + EL.Kar.Original + O.Karak + BLEnergikWh + MatValg + Bruksareal.Enhet + AntallRom + AntallBad + AntallWC + HarHeis + BolType + YearQuarter, data = Analyse_sf)
```

```{r Sjekker multikollinearitet i lm5}
vif_values_5 <- vif(linear_model_5)
print(vif_values_5)
```

### VIF, Rein Energi

```{r lager lineær modell6}
linear_model_6 <- lm(pm2 ~ Alder + EL.Kar.Original + O.Karak + BLEnergikWh + MatValg + Bruksareal.Enhet, data = Analyse_sf)
```

```{r Sjekker multikollinearitet i lm6}
vif_values_6 <- vif(linear_model_6)
print(vif_values_6)
```

En GVIF-verdi på mindre enn 5 regnes som akseptabelt for å unngå signifikant multikollinearitet. Her har BRA.Bolig og BebygdAreal en GVIF-verdi på henholdsvis 2.03 og 1.87, som indikerer at det ikke er noen signifikant multikollinearitet mellom dem. Bruksareal.Enhet har også en lav GVIF-verdi på 1.75, selv om antallet koeffisienter i modellen er høyt (220), som kan tyde på at det ikke er noen signifikant multikollinearitet mellom denne variabelen og de andre variablene i modellen. Dermed er det sannsynlig at disse variablene kan brukes sammen i en regresjonsmodell uten å påvirke modellens prediktive kraft eller nøyaktighet negativt på grunn av multikollinearitet.

```{r Fullstendig korrelasjonsmatrise, eval=FALSE}
cor_matrix_1 <- cor(Analyse[c("P", "Alder", "EL.Kar", "O.Karak_num", "BLEnergikWh", "MatValg_num", "AntEiendom", "EiendomAreal", "BRA.Bolig", "Bruksareal.Enhet", "Etasje", "VannkantGL", "VegkantGL", "BebygdAreal", "RegLBE", "RegGrunnforur", "RegKulturEiendom", "RegGrunnerverv", "TotBoliger", "RegKulturByg", "AntallRom", "AntallBad", "AntallWC", "PrivatEid", "HarHeis", "VannKode", "AvlopsKode")])
ggcorrplot(cor_matrix_1) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8.5)) +
  theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8.5))
```

```{r Visualisering av fullstendig korrelasjonsmatrise, eval=FALSE}
zoomi <- ggcorrplot(cor_matrix_1) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8.5)) +
  theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8.5))

 Save the ggcorrplot as a high-resolution image
ggsave("zoomi.jpeg", zoomi, dpi = 500)
```

```{r Print av fullstendig korrelasjonsmatrise, eval=FALSE}
cor_matrix_1 <- round(cor_matrix_1, 2)
print(cor_matrix_1)
```

```{r Korrelasjonsmatrise rom, eval=FALSE}
cor_matrix_2 <- cor(Analyse[c("P", "AntallRom", "AntallBad", "AntallWC")])
ggcorrplot(cor_matrix_2)
```

```{r Korrelasjonsmatrise diverse, eval=FALSE}
cor_matrix_3 <- cor(Analyse[c("P", "Alder", "BLEnergikWh", "EL.Kar", "O.Karak_num", "MatValg_num")])
ggcorrplot(cor_matrix_3)
```

```{r Korrelasjonsmatrise areal og rom, eval=FALSE}
cor_matrix_4 <- cor(Analyse[c("P", "BRA.Bolig", "Bruksareal.Enhet", "AntallRom", "AntallBad", "AntallWC")])
ggcorrplot(cor_matrix_4)
```

```{r Korrelasjons mellom pris og distanse, eval=FALSE}
correlation <- cor(Analyse_sf$dist_cbd_km, Analyse$P, method = "pearson")
print(correlation)
```

```{r Korrelasjon i .sf-fil, eval=FALSE}
cor_matrix <- cor(Analyse_sf[c("P", "EL.Kar", "Alder", "Etasje", "AntallRom")])
ggcorrplot(cor_matrix, type = "lower", hc.order = TRUE, lab = TRUE)
```

## Korrelasjonsmatrise, Full Modell

```{r Korrelasjonsmatrise_Full_Modell}
cor_matrix_Full_Modell <- cor(Analyse[c("pm2", "Alder", "EL.Kar", "O.Karak_num", "BLEnergikWh", "MatValg_num", "Bruksareal.Enhet", "AntallRom", "AntallBad", "AntallWC", "HarHeis")])
ggcorrplot(cor_matrix_Full_Modell) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8.5)) +
  theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8.5))
```

## Korrelasjonsmatrise, Rein Energi

```{r Korrelasjonsmatrise_Rein_Energi}
cor_matrix_Rein_Energi <- cor(Analyse[c("pm2", "Alder", "EL.Kar", "O.Karak_num", "BLEnergikWh", "MatValg_num", "Bruksareal.Enhet")])
ggcorrplot(cor_matrix_Rein_Energi) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8.5)) +
  theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8.5))
```

# Lager modeller

# Fellesgjeldproblematikken

```{r}
Selveier <- Analyse_sf %>% 
  filter(Snr > 0)
```

```{r}
FG <- Analyse_sf %>% 
  filter(Snr == 0)
```

# Fjerner Snr = 0 Observasjoner

**Ut ifra tilbakemeldinger fra veileder, så fjerner vi observasjoner som har Snr = 0, da disse er med fellesgjeld, og ikke hadde noe signifikant utslag i våres analyse. Vi må gjøre dette på på grunnleggende datasettene, samt på alle datasett som vi bruker i analysen**

```{r SNR_0, eval=FALSE}
Analyse <- Analyse %>% 
  filter(Snr > 0)

Analyse_sf <- Analyse_sf %>% 
  filter(Snr > 0)

Blokker_sf <- Blokker_sf %>% 
  filter(Snr > 0)

Bolig_sf <- Bolig_sf %>% 
  filter(Snr > 0)

Blokker_Eksl_Bergen_sf <- Blokker_Eksl_Bergen_sf %>% 
  filter(Snr > 0)

Bolig_Eksl_Bergen_sf <- Bolig_Eksl_Bergen_sf %>% 
  filter(Snr > 0)
```

# Regresjonsmodeller

## Blokker

### Modell 1

```{r Modell Blokk_1}
options(scipen = 999)

modBlokk1 <- "I(log(pm2)) ~ EL.Kar.Original"
OLSBlokk1 <- lm(modBlokk1, data = Blokker_sf)
summary(OLSBlokk1)
AIC(OLSBlokk1)
BIC(OLSBlokk1)
```

### Modell 2

```{r  Modell Blokk_2}
options(scipen = 999)

modBlokk2 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1))"
OLSBlokk2 <- lm(modBlokk2, data = Blokker_sf)
summary(OLSBlokk2)
AIC(OLSBlokk2)
BIC(OLSBlokk2)
```

### Modell 3

```{r Modell Blokk_3}
options(scipen = 999)

modBlokk3 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak"
OLSBlokk3 <- lm(modBlokk3, data = Blokker_sf)
summary(OLSBlokk3)
AIC(OLSBlokk3)
BIC(OLSBlokk3)
```

### Modell 4

**OLA: Eg TRUR da e log(BLEnergikWh), uten "+1" på slutten. Har sjekka og studert fjorårets master, korleis dei gjere da, og ser ut te at dei gjere da på lik metode.**

```{r Modell Blokk_4}
options(scipen = 999)

modBlokk4 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh)"
OLSBlokk4 <- lm(modBlokk4, data = Blokker_sf)
summary(OLSBlokk4)
AIC(OLSBlokk4)
BIC(OLSBlokk4)
```

### Modell 5

```{r Modell Blokk_5}
options(scipen = 999)

modBlokk5 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg"
OLSBlokk5 <- lm(modBlokk5, data = Blokker_sf)
summary(OLSBlokk5)
AIC(OLSBlokk5)
BIC(OLSBlokk5)
```

### Modell 6

```{r Modell Blokk_6}
options(scipen = 999)

modBlokk6 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1))"
OLSBlokk6 <- lm(modBlokk6, data = Blokker_sf)
summary(OLSBlokk6)
AIC(OLSBlokk6)
BIC(OLSBlokk6)
```

### Modell 7

```{r Modell Blokk_7}
options(scipen = 999)

modBlokk7 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) +
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet))"
OLSBlokk7 <- lm(modBlokk7, data = Blokker_sf)
summary(OLSBlokk7)
AIC(OLSBlokk7)
BIC(OLSBlokk7)
```

### Modell 8

```{r Modell Blokk_8}
options(scipen = 999)

modBlokk8 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon"
OLSBlokk8 <- lm(modBlokk8, data = Blokker_sf)
summary(OLSBlokk8)
AIC(OLSBlokk8)
BIC(OLSBlokk8)
```

### Modell 9

```{r Modell Blokk_9}
options(scipen = 999)

modBlokk9 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL"
OLSBlokk9 <- lm(modBlokk9, data = Blokker_sf)
summary(OLSBlokk9)
AIC(OLSBlokk9)
BIC(OLSBlokk9)
```

### Modell 10

```{r Modell Blokk_10}
options(scipen = 999)

modBlokk10 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL"
OLSBlokk10 <- lm(modBlokk10, data = Blokker_sf)
summary(OLSBlokk10)
AIC(OLSBlokk10)
BIC(OLSBlokk10)
```

### Modell 11

```{r Modell Blokk_11}
options(scipen = 999)

modBlokk11 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1))"
OLSBlokk11 <- lm(modBlokk11, data = Blokker_sf)
summary(OLSBlokk11)
AIC(OLSBlokk11)
BIC(OLSBlokk11)
```

### Modell 12

```{r Modell Blokk_12}
options(scipen = 999)

modBlokk12 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE"
OLSBlokk12 <- lm(modBlokk12, data = Blokker_sf)
summary(OLSBlokk12)
AIC(OLSBlokk12)
BIC(OLSBlokk12)
```

### Modell 13

```{r Modell Blokk_13}
options(scipen = 999)

modBlokk13 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur"
OLSBlokk13 <- lm(modBlokk13, data = Blokker_sf)
summary(OLSBlokk13)
AIC(OLSBlokk13)
BIC(OLSBlokk13)
```

### Modell 14

```{r Modell Blokk_14}
options(scipen = 999)

modBlokk14 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom"
OLSBlokk14 <- lm(modBlokk14, data = Blokker_sf)
summary(OLSBlokk14)
AIC(OLSBlokk14)
BIC(OLSBlokk14)
```

### Modell 15

```{r Modell Blokk_15}
options(scipen = 999)

modBlokk15 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv"
OLSBlokk15 <- lm(modBlokk15, data = Blokker_sf)
summary(OLSBlokk15)
AIC(OLSBlokk15)
BIC(OLSBlokk15)
```

### Modell 16

```{r Modell Blokk_16}
options(scipen = 999)

modBlokk16 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg"
OLSBlokk16 <- lm(modBlokk16, data = Blokker_sf)
summary(OLSBlokk16)
AIC(OLSBlokk16)
BIC(OLSBlokk16)
```

### Modell 17

```{r Modell Blokk_17}
options(scipen = 999)
modBlokk17 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom))"
OLSBlokk17 <- lm(modBlokk17, data = Blokker_sf)
summary(OLSBlokk17)
AIC(OLSBlokk17)
BIC(OLSBlokk17)
```

### Modell 18

```{r Modell Blokk_18}
options(scipen = 999)
modBlokk18 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad))"
OLSBlokk18 <- lm(modBlokk18, data = Blokker_sf)
summary(OLSBlokk18)
AIC(OLSBlokk18)
BIC(OLSBlokk18)
```

### Modell 19

```{r Modell Blokk_19}
options(scipen = 999)
modBlokk19 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC))"
OLSBlokk19 <- lm(modBlokk19, data = Blokker_sf)
summary(OLSBlokk19)
AIC(OLSBlokk19)
BIC(OLSBlokk19)
```

### Modell 20

```{r Modell Blokk_20}
options(scipen = 999)
modBlokk20 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC)) + 
  PrivatEid"
OLSBlokk20 <- lm(modBlokk20, data = Blokker_sf)
summary(OLSBlokk20)
AIC(OLSBlokk20)
BIC(OLSBlokk20)
```

### Modell 21

```{r Modell Blokk_21}
options(scipen = 999)
modBlokk21 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC)) + 
  PrivatEid + 
  HarHeis"
OLSBlokk21 <- lm(modBlokk21, data = Blokker_sf)
summary(OLSBlokk21)
AIC(OLSBlokk21)
BIC(OLSBlokk21)
```

### Modell 22

```{r Modell Blokk_22}
options(scipen = 999)
modBlokk22 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC)) + 
  PrivatEid + 
  HarHeis + 
  VannKode"
OLSBlokk22 <- lm(modBlokk22, data = Blokker_sf)
summary(OLSBlokk22)
AIC(OLSBlokk22)
BIC(OLSBlokk22)
```

### Modell 23

```{r Modell Blokk_23}
options(scipen = 999)
modBlokk23 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC)) + 
  PrivatEid + 
  HarHeis + 
  VannKode + 
  AvlopsKode"
OLSBlokk23 <- lm(modBlokk23, data = Blokker_sf)
summary(OLSBlokk23)
AIC(OLSBlokk23)
BIC(OLSBlokk23)
```

### Modell 24

```{r Modell Blokk_24}
options(scipen = 999)
modBlokk24 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC)) + 
  PrivatEid + 
  HarHeis + 
  VannKode + 
  AvlopsKode + 
  BolType"
OLSBlokk24 <- lm(modBlokk24, data = Blokker_sf)
summary(OLSBlokk24)
AIC(OLSBlokk24)
BIC(OLSBlokk24)
```

### Modell 25

```{r Modell Blokk_25}
options(scipen = 999)
modBlokk25 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC)) + 
  PrivatEid + 
  HarHeis + 
  VannKode + 
  AvlopsKode + 
  BolType + 
  Kjokken"
OLSBlokk25 <- lm(modBlokk25, data = Blokker_sf)
summary(OLSBlokk25)
AIC(OLSBlokk25)
BIC(OLSBlokk25)
```

### Modell 26

**OLA: Litt usikker på om YearQuarter variabelen e rekna som ein "dummy"-variabel eller ikkje. Så har foreløpig lagt den inn i I(log()) funksjon. Detta må avkreftast!**

```{r Modell Blokk_26}
options(scipen = 999)
modBlokk26 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC)) + 
  PrivatEid + 
  HarHeis + 
  VannKode + 
  AvlopsKode + 
  BolType + 
  Kjokken + 
  YearQuarter"
OLSBlokk26 <- lm(modBlokk26, data = Blokker_sf)
summary(OLSBlokk26)
AIC(OLSBlokk26)
BIC(OLSBlokk26)
```

### Modell 27

```{r Modell Blokk_27}
options(scipen = 999)
modBlokk27 <- "I(log(pm2)) ~ EL.Kar.Original + 
  I(log(Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  I(log(EiendomAreal+1)) + 
  I(log(Bruksareal.Enhet)) + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  I(log(BebygdAreal+1)) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  I(log(AntallRom)) + 
  I(log(AntallBad)) + 
  I(log(AntallWC)) + 
  PrivatEid + 
  HarHeis + 
  VannKode + 
  AvlopsKode + 
  BolType + 
  Kjokken + 
  YearQuarter + 
  I(log(dist_cbd_km))"
OLSBlokk27 <- lm(modBlokk27, data = Blokker_sf)
summary(OLSBlokk27)
AIC(OLSBlokk27)
BIC(OLSBlokk27)
```

### Model for kun energirelaterte karakteristika

```{r Modell Blokk_Energi}
options(scipen = 999)

modBlokkEnergi <- "I(log(pm2)) ~ EL.Kar.Original + O.Karak + log(BLEnergikWh) + MatValg"
OLSBlokkEnergi <- lm(modBlokkEnergi, data = Blokker_sf)
summary(OLSBlokkEnergi)
AIC(OLSBlokkEnergi)
BIC(OLSBlokkEnergi)
```

# VarImplot

*Link til side med mal: https://koalaverse.github.io/vip/articles/vip.html*

```{r rfo_pris}
rfo_pris <- ranger(pm2 ~ 
  EL.Kar.Original + 
  Alder + 
  O.Karak + 
  BLEnergikWh + 
  MatValg + 
#  EiendomAreal + 
  Bruksareal.Enhet + 
  EtasjeSeksjon + 
  VannkantGL + 
#  VegkantGL + 
#  BebygdAreal + 
#  RegLBE + 
#  RegGrunnforur + 
  RegKulturEiendom + 
#  RegGrunnerverv + 
  RegKulturByg + 
  AntallRom + 
  AntallBad + 
  AntallWC + 
  PrivatEid + 
  HarHeis + 
#  VannKode + 
#  AvlopsKode + 
  BolType + 
#  Kjokken + 
  YearQuarter +
  Kommune, 
    data = Analyse,
      importance = "impurity")
```

```{r rfo_energi}
rfo_energi <- ranger(EL.Kar ~ 
  pm2 + 
  Alder + 
  O.Karak + 
  BLEnergikWh + 
  MatValg + 
#  EiendomAreal + 
  Bruksareal.Enhet + 
  EtasjeSeksjon + 
  VannkantGL + 
#  VegkantGL + 
#  BebygdAreal + 
#  RegLBE + 
#  RegGrunnforur + 
  RegKulturEiendom + 
#  RegGrunnerverv + 
  RegKulturByg + 
  AntallRom + 
  AntallBad + 
  AntallWC + 
  PrivatEid + 
  HarHeis + 
#  VannKode + 
#  AvlopsKode + 
  BolType + 
#  Kjokken + 
  YearQuarter +
  Kommune, 
    data = Analyse,
      importance = "impurity")
```

```{r}
vi_rfo2 <- importance(rfo_pris, type = 1)
var_imp_df_pris <- data.frame(variable = names(vi_rfo2),
                         importance = vi_rfo2,
                         stringsAsFactors = FALSE)

var_imp_df_pris <- var_imp_df_pris[order(-var_imp_df_pris$importance),]
```

```{r}
vi_rfo3 <- importance(rfo_energi, type = 1)
var_imp_df_energi <- data.frame(variable = names(vi_rfo3),
                         importance = vi_rfo3,
                         stringsAsFactors = FALSE)

var_imp_df_energi <- var_imp_df_energi[order(-var_imp_df_energi$importance),]
```

```{r}
ggplot(var_imp_df_pris, aes(x = reorder(variable, importance), y = importance, fill = importance)) +
  geom_col(show.legend = FALSE) +
  scale_fill_gradient(low = "#64D0DF", high = "#004357") +
  labs(title = "Variable Importance - Pris", x = "Predictor Variable", y = "Importance") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        panel.border = element_blank(),
        plot.margin = unit(c(0.01,0.01,0.01,0.01), "lines")) +
  coord_flip()
```

```{r}
ggplot(var_imp_df_energi, aes(x = reorder(variable, importance), y = importance, fill = importance)) +
  geom_col(show.legend = FALSE) +
  scale_fill_gradient(low = "#64D0DF", high = "#004357") +
  labs(title = "Variable Importance - Energikarakter", x = "Predictor Variable", y = "Importance") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
        axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        panel.border = element_blank(),
        plot.margin = unit(c(0.01,0.01,0.01,0.01), "lines")) +
  coord_flip()
```

# Modell for BRA. Bolig og BRA.Tot individuelt

## BRA.Bolig

```{r Modell Bolig, eval=FALSE}
options(scipen = 999)

modBolig <- "I(log(pm2)) ~ BRA.Bolig"
OLSBolig <- lm(modBolig, data = Analyse_sf)
summary(OLSBolig)
AIC(OLSBolig)
BIC(OLSBolig)
```

## BRA.Tot

```{r Modell Tot, eval=FALSE}
options(scipen = 999)

modTOT <- "I(log(pm2)) ~ BRA.Tot"
OLSTOT <- lm(modTOT, data = Analyse_sf)
summary(OLSTOT)
AIC(OLSTOT)
BIC(OLSTOT)
```

## Bruksareal.Enhet

```{r Modell Boligenhet, eval=FALSE}
options(scipen = 999)

modEnhet <- "I(log(pm2)) ~ Bruksareal.Enhet"
OLSEnhet <- lm(modEnhet, data = Analyse_sf)
summary(OLSEnhet)
AIC(OLSEnhet)
BIC(OLSEnhet)
```

# Kjører "Stepwise Regression" Analyse

```{r}
intercept_only <- lm(pm2 ~ 1, data = Blokker_sf)
```

```{r}
all <- lm(pm2 ~ EL.Kar.Original + 
  (Alder+1) + 
  O.Karak + 
  BLEnergikWh + 
  MatValg + 
  (EiendomAreal+1) + 
  Bruksareal.Enhet + 
  EtasjeSeksjon + 
  VannkantGL + 
  VegkantGL + 
  (BebygdAreal+1) + 
  RegLBE + 
  RegGrunnforur + 
  RegKulturEiendom + 
  RegGrunnerverv + 
  RegKulturByg + 
  (AntallRom) + 
  (AntallBad) + 
  (AntallWC) + 
  PrivatEid + 
  HarHeis + 
  VannKode + 
  AvlopsKode + 
  BolType + 
  Kjokken + 
  YearQuarter + 
  (dist_cbd_km),
  data = Blokker_sf
)
```

```{r}
forward <- step(intercept_only, direction = 'forward', scope = formula(all), trace = 0)
```

```{r}
forward$anova
```

```{r}
forward$coefficients
```

# Forslag til modeller for videre modellkjøring, litt utifra Liv's tilbakemeldinger (Midlertidig, Åpen for forslag/endring)

**OLA: Detta e eksludert kommune. Da tar eg etter me blir enig om finalisert modell**

## Lager datasett for strømpriskrise

```{r}
Blokker_sf_Pre_Krise <- Blokker_sf %>% 
  filter(YearQuarter < "2021Q4")
```

```{r}
Blokker_sf_Etter_Krise <- Blokker_sf %>% 
  filter(YearQuarter >= "2021Q4")
```

```{r}
Bergen_sf_Pre_Krise <- Bergen_sf %>% 
  filter(YearQuarter < "2021Q4")
```

```{r}
Bergen_sf_Etter_Krise <- Bergen_sf %>% 
  filter(YearQuarter >= "2021Q4")
```

## Setter refferanseverdier

```{r eval=FALSE}
Analyse_sf$Kommune <- as.factor(Analyse_sf$Kommune) # Character -> Factor
Analyse_sf$Kommune <- relevel(Analyse_sf$Kommune, ref = "Bergen") # Referanseverdi
```

```{r}
Analyse_sf$EL.Kar.Original <- as.factor(Analyse_sf$EL.Kar.Original) # Character -> Factor
Analyse_sf$EL.Kar.Original <- relevel(Analyse_sf$EL.Kar.Original, ref = "A") # Referanseverdi
```

```{r}
Analyse_sf$O.Karak <- as.factor(Analyse_sf$O.Karak) # Character -> Factor
Analyse_sf$O.Karak <- relevel(Analyse_sf$O.Karak, ref = "Green") # Referanseverdi
```

```{r}
Analyse_sf$YearQuarter <- as.factor(Analyse_sf$YearQuarter) # Character -> Factor
Analyse_sf$YearQuarter <- relevel(Analyse_sf$YearQuarter, ref = "2022Q4") # Referanseverdi
```

```{r eval=FALSE}
Blokker_sf$Kommune <- as.factor(Blokker_sf$Kommune) # Character -> Factor
Blokker_sf$Kommune <- relevel(Blokker_sf$Kommune, ref = "Bergen") # Referanseverdi
```

```{r}
Blokker_sf$EL.Kar.Original <- as.factor(Blokker_sf$EL.Kar.Original) # Character -> Factor
Blokker_sf$EL.Kar.Original <- relevel(Blokker_sf$EL.Kar.Original, ref = "A") # Referanseverdi
```

```{r}
Blokker_sf$O.Karak <- as.factor(Blokker_sf$O.Karak) # Character -> Factor
Blokker_sf$O.Karak <- relevel(Blokker_sf$O.Karak, ref = "Green") # Referanseverdi
```

```{r}
Blokker_sf$YearQuarter <- as.factor(Blokker_sf$YearQuarter) # Character -> Factor
Blokker_sf$YearQuarter <- relevel(Blokker_sf$YearQuarter, ref = "2022Q4") # Referanseverdi
```

```{r}
Blokker_sf_Pre_Krise$EL.Kar.Original <- as.factor(Blokker_sf_Pre_Krise$EL.Kar.Original) # Character -> Factor
Blokker_sf_Pre_Krise$EL.Kar.Original <- relevel(Blokker_sf_Pre_Krise$EL.Kar.Original, ref = "A") # Referanseverdi
```

```{r}
Blokker_sf_Pre_Krise$O.Karak <- as.factor(Blokker_sf_Pre_Krise$O.Karak) # Character -> Factor
Blokker_sf_Pre_Krise$O.Karak <- relevel(Blokker_sf_Pre_Krise$O.Karak, ref = "Green") # Referanseverdi
```

```{r}
Blokker_sf_Pre_Krise$YearQuarter <- as.factor(Blokker_sf_Pre_Krise$YearQuarter) # Character -> Factor
Blokker_sf_Pre_Krise$YearQuarter <- relevel(Blokker_sf_Pre_Krise$YearQuarter, ref = "2021Q3") # Referanseverdi
```

```{r}
Blokker_sf_Etter_Krise$EL.Kar.Original <- as.factor(Blokker_sf_Etter_Krise$EL.Kar.Original) # Character -> Factor
Blokker_sf_Etter_Krise$EL.Kar.Original <- relevel(Blokker_sf_Etter_Krise$EL.Kar.Original, ref = "A") # Referanseverdi
```

```{r}
Blokker_sf_Etter_Krise$O.Karak <- as.factor(Blokker_sf_Etter_Krise$O.Karak) # Character -> Factor
Blokker_sf_Etter_Krise$O.Karak <- relevel(Blokker_sf_Etter_Krise$O.Karak, ref = "Green") # Referanseverdi
```

```{r}
Blokker_sf_Etter_Krise$YearQuarter <- as.factor(Blokker_sf_Etter_Krise$YearQuarter) # Character -> Factor
Blokker_sf_Etter_Krise$YearQuarter <- relevel(Blokker_sf_Etter_Krise$YearQuarter, ref = "2022Q4") # Referanseverdi
```

## Forslag, OLS-Modell

### Full Modell

```{r Modell_Kommuner}
options(scipen = 999)
modBlokk <- "log(pm2) ~ 
  EL.Kar.Original + 
  log(Alder+1) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  log(AntallRom) + 
  log(AntallBad) + 
  log(AntallWC) + 
  HarHeis + 
  BolType + 
  YearQuarter +
  Kommune + 
  log(Bruksareal.Enhet) + 
  log(dist_cbd_km)"
OLSBlokk <- lm(modBlokk, data = Blokker_sf)
summary(OLSBlokk)
AIC(OLSBlokk)
BIC(OLSBlokk)
```

### Bergen

```{r Modell_Bergen}
options(scipen = 999)
modBergen <- "log(pm2) ~ 
  EL.Kar.Original + 
  log(Alder+1) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  log(AntallRom) + 
  log(AntallBad) + 
  log(AntallWC) + 
  HarHeis + 
  BolType + 
  YearQuarter +
  log(Bruksareal.Enhet) + 
  log(dist_cbd_km)"
OLSBergen <- lm(modBergen, data = Bergen_sf)
summary(OLSBergen)
AIC(OLSBergen)
BIC(OLSBergen)
```

### Generell

```{r Modell_Generell}
options(scipen = 999)
modGenerell <- "log(pm2) ~ 
  EL.Kar.Original + 
  log(Alder+1) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  log(AntallRom) + 
  log(AntallBad) + 
  log(AntallWC) + 
  HarHeis + 
  BolType + 
  YearQuarter +
  log(Bruksareal.Enhet) + 
  log(dist_cbd_km)"
OLSGenerell <- lm(modGenerell, data = Blokker_sf)
summary(OLSGenerell)
AIC(OLSGenerell)
BIC(OLSGenerell)
```

### Modell - Kun Energi Karakteristika

#### Hele Regionen

```{r Modell Blokk_Energi_Perioden}
options(scipen = 999)

modBlokkEnergi <- "log(pm2) ~ EL.Kar.Original + O.Karak + log(BLEnergikWh) + MatValg + log(Alder+1)"
OLSBlokkEnergi <- lm(modBlokkEnergi, data = Blokker_sf)
summary(OLSBlokkEnergi)
AIC(OLSBlokkEnergi)
BIC(OLSBlokkEnergi)
```

#### Hele Regionen - Kommuner

```{r Modell Blokk_Energi_Perioden}
options(scipen = 999)

modBlokkEnergi <- "log(pm2) ~ EL.Kar.Original + O.Karak + log(BLEnergikWh) + MatValg + log(Alder+1)"
OLSBlokkEnergi <- lm(modBlokkEnergi, data = Blokker_sf)
summary(OLSBlokkEnergi)
AIC(OLSBlokkEnergi)
BIC(OLSBlokkEnergi)
```

#### Bergen

```{r Modell Bergen_Energi_Perioden}
options(scipen = 999)

BergenEnergi <- "log(pm2) ~ EL.Kar.Original + O.Karak + log(BLEnergikWh) + MatValg + log(Alder+1)"
OLSBergenEnergi <- lm(BergenEnergi, data = Bergen_sf)
summary(OLSBergenEnergi)
AIC(OLSBergenEnergi)
BIC(OLSBergenEnergi)
```

# Strømpriskrise

## Før Strømpriskrise - Generell

```{r Modell_Done_Pre_Krise}
options(scipen = 999)
modBlokk_Pre_Krise <- "log(pm2) ~ 
  EL.Kar.Original + 
  log((Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  log(AntallRom) + 
  log(AntallBad) + 
  log(AntallWC) + 
  HarHeis + 
  BolType +
  log(dist_cbd_km)"
OLSBlokk_Pre_Krise <- lm(modBlokk_Pre_Krise, data = Blokker_sf_Pre_Krise)
summary(OLSBlokk_Pre_Krise)
AIC(OLSBlokk_Pre_Krise)
BIC(OLSBlokk_Pre_Krise)
```

## Etter Strømpriskrise - Generell

```{r Modell_Done_Etter_Krise}
options(scipen = 999)
modBlokk_Etter_Krise <- "log(pm2) ~ 
  EL.Kar.Original + 
  log((Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  log(AntallRom) + 
  log(AntallBad) + 
  log(AntallWC) + 
  HarHeis + 
  BolType + 
  log(dist_cbd_km)"
OLSBlokk_Etter_Krise <- lm(modBlokk_Etter_Krise, data = Blokker_sf_Etter_Krise)
summary(OLSBlokk_Etter_Krise)
AIC(OLSBlokk_Etter_Krise)
BIC(OLSBlokk_Etter_Krise)
```

## Før Strømpriskrise - Bergen

```{r Modell_Done_Pre_Krise}
options(scipen = 999)
Bergen_Pre_Krise <- "log(pm2) ~ 
  EL.Kar.Original + 
  log((Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  log(AntallRom) + 
  log(AntallBad) + 
  log(AntallWC) + 
  HarHeis + 
  BolType + 
  YearQuarter +
  log(dist_cbd_km)"
OLSBergen_Pre_Krise <- lm(Bergen_Pre_Krise, data = Bergen_sf_Pre_Krise)
summary(OLSBergen_Pre_Krise)
AIC(OLSBergen_Pre_Krise)
BIC(OLSBergen_Pre_Krise)
```

## Etter Strømpriskrise - Bergen

```{r Modell_Done_Etter_Krise}
options(scipen = 999)
Bergen_Etter_Krise <- "log(pm2) ~ 
  EL.Kar.Original + 
  log((Alder+1)) + 
  O.Karak + 
  log(BLEnergikWh) + 
  MatValg + 
  log(AntallRom) + 
  log(AntallBad) + 
  log(AntallWC) + 
  HarHeis + 
  BolType + 
  YearQuarter +
  log(dist_cbd_km)"
OLSBergen_Etter_Krise <- lm(Bergen_Etter_Krise, data = Bergen_sf_Etter_Krise)
summary(OLSBergen_Etter_Krise)
AIC(OLSBergen_Etter_Krise)
BIC(OLSBergen_Etter_Krise)
```

```{r}
t_test_result <- t.test(Bergen_sf_Etter_Krise$pm2, Bergen_sf_Pre_Krise$pm2)
print(t_test_result)
```

```{r}
ts_data_Etter_Krise <- ts(Bergen_sf_Etter_Krise$pm2, start=start(Bergen_sf_Etter_Krise$YearQuarter), end=end(Bergen_sf_Etter_Krise$YearQuarter))
ts_data_Pre_Krise <- ts(Bergen_sf_Pre_Krise$pm2, start=start(Bergen_sf_Pre_Krise$YearQuarter), end=end(Bergen_sf_Pre_Krise$YearQuarter))

bp_Etter_Krise <- breakpoints(ts_data_Etter_Krise ~ 1)
bp_Pre_Krise <- breakpoints(ts_data_Pre_Krise ~ 1)

print(bp_Etter_Krise)
print(bp_Pre_Krise)
```

```{r}
YearQuarter_Etter_Krise_295 <- Bergen_sf_Etter_Krise$YearQuarter[295]
YearQuarter_Pre_Krise_182 <- Bergen_sf_Pre_Krise$YearQuarter[182]
YearQuarter_Pre_Krise_799 <- Bergen_sf_Pre_Krise$YearQuarter[799]

print(paste("Kvartal ved observasjon 295 i Bergen etter strømpriskrisen:", YearQuarter_Etter_Krise_295))
print(paste("Kvartal ved observasjon 182 i Bergen før strømpriskrisen:", YearQuarter_Pre_Krise_182))
print(paste("Kvartal ved observasjon 799 i Bergen før strømpriskrisen:", YearQuarter_Pre_Krise_799))
```


# HuxReg av OLS-modeller

```{r huxreg}
#Ekje heilt oppe å går endo. Jobbe med da.

#huxreg("OLS1" = OLS1, "OLS2" = OLS2, "OLS3" = OLS3,
#       coefs = c("(Intercept)", "EL.Kar", "O.Karak_num", "MatValg_num"), #Lagt til filter på enkelte variabler
#       error_format = "[{statistic}]",
#       note = "{stars}. T statistic in brackets.")
```

# Moran's Test

## Moran's - OLS1

```{r Morans test OLS1, eval=FALSE}
lm.morantest(OLS1, Analyse_sf_W3)
lm.morantest(OLS1, Analyse_sf_W5)
lm.morantest(OLS1, Analyse_sf_W10)
```

## Moran's - OLS2

```{r Morans test OLS2, eval=FALSE}
lm.morantest(OLS2, Analyse_sf_W3)
lm.morantest(OLS2, Analyse_sf_W5)
lm.morantest(OLS2, Analyse_sf_W10)
```

## Moran's - OLS3

```{r Morans test OLS3, eval=FALSE}
lm.morantest(OLS3, Analyse_sf_W3)
lm.morantest(OLS3, Analyse_sf_W5)
lm.morantest(OLS3, Analyse_sf_W10)
```


## Moran's - OLS4

```{r Morans test OLS4, eval=FALSE}
lm.morantest(OLS4, Analyse_sf_W3)
lm.morantest(OLS4, Analyse_sf_W5)
lm.morantest(OLS4, Analyse_sf_W10)
```

## Moran's - OLS5

```{r Morans test OLS5, eval=FALSE}
lm.morantest(OLS5, Analyse_sf_W3)
lm.morantest(OLS5, Analyse_sf_W5)
lm.morantest(OLS5, Analyse_sf_W10)
```

# Kevins romlige modeller

Før vi kan kjøre de romlige modellene, må vi sjekke for multikollinearitet.

```{r}
vif_model <- lm(pm2 ~ EL.Kar.Original + Alder + O.Karak + BLEnergikWh + MatValg + Bruksareal.Enhet + AntallRom + AntallBad + AntallWC + HarHeis + YearQuarter + Kommune + dist_cbd_km, data = Analyse_sf)
```

```{r}
vif_values <- vif(vif_model)
print(vif_values)
```

# Analysen

**Har satt  eval=FALSE på alle modeller, grunna vanvittig tid og arbeid som trengs å kjøra gjennom heila dokumentet samla**

## SAR (Spatial Autoregressiv)

```{r}
Modell_Bergen <- "log(pm2) ~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km)"
```

```{r eval=FALSE}
Modell_Bergen <- "pm2 ~ EL.Kar + Alder + O.Karak + BLEnergikWh + MatValg + AntallRom + AntallBad + AntallWC + HarHeis + YearQuarter + Bruksareal.Enhet + dist_cbd_km"
```

```{r eval=FALSE}
#Modell_Kommuner <- "log(pm2) ~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh+1) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + Kommune + log(dist_cbd_km)"
```

```{r}
Modell_Generell <- "log(pm2) ~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km)"
```

```{r eval=FALSE}
Modell_Generell <- "pm2 ~ EL.Kar.Original + Alder + O.Karak + BLEnergikWh + MatValg + AntallRom + AntallBad + AntallWC + HarHeis + YearQuarter + Bruksareal.Enhet + dist_cbd_km"
```

## Anselin Approach (LaGrange Multiplikator)
**Arnsteins Slider fra forelesning:**

**https://msb205.netlify.app/spatmetrics/spatreg/#/is-multicollinearity-a-problem**

### Bergen

```{r}
lm_Bergen <- lm(Modell_Bergen, data = Bergen_sf)
```

#### LM_test, K=3

```{r}
lm.LMtests(lm_Bergen, listw = Analyse_W3_red, test = "all")
```

#### LM_test, K=10

```{r}
lm.LMtests(lm_Bergen, listw = Analyse_W10_red, test = "all")
```

### Regionen

```{r}
lm_Region <- lm(Modell_Generell, data = Blokker_sf)
```

#### LM_test, K=3

```{r}
lm.LMtests(lm_Region, listw = Analyse_W3, test = "all")
```

#### LM_test, K=10

```{r}
lm.LMtests(lm_Region, listw = Analyse_W10, test = "all")
```

### SAR

```{r}
sar_model_Bergen_k3 <- lagsarlm(Modell_Bergen,
                      data = Bergen_sf,
                      listw = Analyse_W3_red,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r}
sar_model_Bergen_k10 <- lagsarlm(Modell_Bergen,
                      data = Bergen_sf,
                      listw = Analyse_W10_red,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r}
sar_model_generell_k3 <- lagsarlm(Modell_Generell,
                      data = Analyse_sf,
                      listw = Analyse_W3,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r}
sar_model_generell_k10 <- lagsarlm(Modell_Generell,
                      data = Analyse_sf,
                      listw = Analyse_W10,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

### Summary av SAR-modellen

```{r}
cat("Summary for SAR Model - Bergen, K3:\n")
print(summary(sar_model_Bergen_k3))
```

```{r}
cat("Summary for SAR Model - Bergen, K10:\n")
print(summary(sar_model_Bergen_k10))
```

```{r}
cat("Summary for SAR Model - Generell, K3:\n")
print(summary(sar_model_generell_k3))
```

```{r}
cat("Summary for SAR Model - Generell, K10:\n")
print(summary(sar_model_generell_k10))
```

```{r}
impacts(sar_model_Bergen_k10, listw = Analyse_W10_red)
```

### Moran's Plot for SAR

```{r}
moran.plot(residuals(sar_model_Bergen_k3), listw = Analyse_W3_red)
```

```{r}
moran.plot(residuals(sar_model_Bergen_k10), listw = Analyse_W10_red)
```

```{r}
moran.plot(residuals(sar_model_generell_k3), listw = Analyse_W3)
```

```{r}
moran.plot(residuals(sar_model_generell_k10), listw = Analyse_W10)
```

## SAC (Spatial Simultaneous Autoregressiv)

### SAC

**OLA: Trur da e Durbin = False her. Men eg finne ikkje noke konkret på Arnsteins slida, så ekje 100% sikker**

```{r eval=FALSE}
sac_model_Bergen_K3 <- sacsarlm(Modell_Bergen,
                      data = Bergen_sf,
                      listw = Analyse_W3_red,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r eval=FALSE}
sac_model_Bergen_K10 <- sacsarlm(Modell_Bergen,
                      data = Bergen_sf,
                      listw = Analyse_W10_red,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r eval=FALSE}
sac_model_Generell_K3 <- sacsarlm(Modell_Generell,
                      data = Analyse_sf,
                      listw = Analyse_W3,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r eval=FALSE}
sac_model_Generell_K10 <- sacsarlm(Modell_Generell,
                      data = Analyse_sf,
                      listw = Analyse_W10,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

### Summary av SAC-modellene

```{r eval=FALSE}
cat("Summary for SAC Model - Bergen, K3:\n")
print(summary(sac_model_Bergen_K3))
```

```{r eval=FALSE}
cat("Summary for SAC Model - Bergen, K10:\n")
print(summary(sac_model_Bergen_K10))
```

```{r eval=FALSE}
cat("Summary for SAC Model - Generell, K3:\n")
print(summary(sac_model_Generell_K3))
```

```{r eval=FALSE}
cat("Summary for SAC Model - Generell, K10:\n")
print(summary(sac_model_Generell_K10))
```

## SEM (Spatial Error Model)

**Skifter vår noverande Durbin = as.formula(~ EL.Kar.Original + Alder + O.Karak + BLEnergikWh + MatValg + Bruksareal.Enhet + AntallRom + AntallBad + AntallWC + HarHeis + YearQuarter + dist_cbd_km) til --> Durbin = FALSE grunna tilbakemelding fra Liv ang. at vi ikkje skal bruke SDEM modell.**

**I følge Arnsteins slider på MSB205, så er Durbin = True/as.formula for SDEM modeller, mens Durbin = false, når vi ikkje skal bruke SDEM modell.**

Link til Arnsteins slide om SDEM og SEM for Durbin funksjon.

https://msb205.netlify.app/spatmetrics/spatreg/#/sem-model

### SEM

```{r}
sem_model_Bergen_k3 <- errorsarlm(Modell_Bergen,
                      data = Bergen_sf,
                      listw = Analyse_W3_red,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r}
sem_model_Bergen_k10 <- errorsarlm(Modell_Bergen,
                      data = Bergen_sf,
                      listw = Analyse_W10_red,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r}
sem_model_Generell_k3 <- errorsarlm(Modell_Generell,
                      data = Analyse_sf,
                      listw = Analyse_W3,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r}
sem_model_Generell_k10 <- errorsarlm(Modell_Generell,
                      data = Analyse_sf,
                      listw = Analyse_W10,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

```{r eval=FALSE}
sem_model_Generell_k15 <- errorsarlm(Modell_Generell,
                      data = Analyse_sf,
                      listw = Analyse_W15,
                      Durbin = FALSE,
                      tol.solve = 1e-10)
```

### Summary av SEM-modeller

```{r}
cat("Summary for SEM Model - Bergen, K3:\n")
print(summary(sem_model_Bergen_k3))
```

```{r}
cat("Summary for SEM Model - Bergen, K10:\n")
print(summary(sem_model_Bergen_k10))
```

```{r}
cat("Summary for SEM Model - Generell, K3:\n")
print(summary(sem_model_Generell_k3))
```

```{r}
cat("Summary for SEM Model - Generell, K10:\n")
print(summary(sem_model_Generell_k10))
```

```{r eval=FALSE}
cat("Summary for SEM Model - Generell, K15:\n")
print(summary(sem_model_Generell_k15))
```

### R2 For SEM-Modeller

#### R2, SEM, Bergen, K3

```{r eval=FALSE}
RSS <- sum(residuals(sem_model_Bergen_k3)^2)
TSS <- sum((Bergen_sf$pm2 - mean(Bergen_sf$pm2))^2)
n <- nrow(Bergen_sf)
p <- length(coefficients(sem_model_Bergen_k3)) - 1
R2 <- 1 - (RSS / TSS)
AdjR2 <- 1 - (1 - R2) * ((n - 1) / (n - p - 1))
AdjR2
```

#### R2, SEM, Bergen, K10

```{r eval=FALSE}
RSS <- sum(residuals(sem_model_Bergen_k10)^2)
TSS <- sum((Bergen_sf$pm2 - mean(Bergen_sf$pm2))^2)
n <- nrow(Bergen_sf)
p <- length(coefficients(sem_model_Bergen_k10)) - 1
R2 <- 1 - (RSS / TSS)
AdjR2 <- 1 - (1 - R2) * ((n - 1) / (n - p - 1))
AdjR2
```

#### R2, SEM, Generell, K3

```{r eval=FALSE}
RSS <- sum(residuals(sem_model_Generell_k3)^2)
TSS <- sum((Analyse_sf$pm2 - mean(Analyse_sf$pm2))^2)
n <- nrow(Analyse_sf)
p <- length(coefficients(sem_model_Generell_k3)) - 1
R2 <- 1 - (RSS / TSS)
AdjR2 <- 1 - (1 - R2) * ((n - 1) / (n - p - 1))
AdjR2
```


#### R2, SEM, Generell, K10

```{r eval=FALSE}
RSS <- sum(residuals(sem_model_Generell_k10)^2)
TSS <- sum((Analyse_sf$pm2 - mean(Analyse_sf$pm2))^2)
n <- nrow(Analyse_sf)
p <- length(coefficients(sem_model_Generell_k10)) - 1
R2 <- 1 - (RSS / TSS)
AdjR2 <- 1 - (1 - R2) * ((n - 1) / (n - p - 1))
AdjR2
```


### Morans I av SEM-modell

#### SEM, Kommune, K3

```{r}
resid_model <- residuals(sem_model_Bergen_k3)
moran.test(resid_model, listw = Analyse_W3_red)
```

#### SEM, Kommune, K10

```{r}
resid_model <- residuals(sem_model_Bergen_k10)
moran.test(resid_model, listw = Analyse_W10_red)
```

#### SEM, Generell, K3

```{r}
resid_model <- residuals(sem_model_Generell_k3)
moran.test(resid_model, listw = Analyse_W3)
```

#### SEM, Generell, K10

```{r}
resid_model <- residuals(sem_model_Generell_k10)
moran.test(resid_model, listw = Analyse_W10)
```

### Plot av SEM-modell

#### SEM, Kommune, K3

```{r eval=FALSE}
moran.plot(
  x = residuals(sem_model_Bergen_k3),
  listw = Analyse_W3_red
)
```

#### SEM, Kommune, K10

```{r eval=FALSE}
moran.plot(
  x = residuals(sem_model_Bergen_k10),
  listw = Analyse_W10_red
)
```

#### SEM, Generell, K3

```{r eval=FALSE}
moran.plot(
  x = residuals(sem_model_Generell_k3),
  listw = Analyse_W3
)
```

#### SEM, Generell, K10

```{r eval=FALSE}
moran.plot(
  x = residuals(sem_model_Generell_k10),
  listw = Analyse_W10
)
```

## SLX (Spatial lag of X-model)

### SLX

Durbin = as.formula(~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km))

```{r}
slx_model_Bergen_k3 <- lmSLX(Modell_Bergen,
                                 data = Bergen_sf,
                                 listw = Analyse_W3_red,
                                 Durbin = as.formula(~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km))
                               )
```

```{r eval=FALSE}
log_likelihood <- function(slx_model_Bergen_k3) {
  n <- length(slx_model_Bergen_k3$residuals)
  sigma2 <- sum(slx_model_Bergen_k3$residuals^2) / n
  log_likelihood <- -0.5 * n * (log(2 * pi) + log(sigma2) + 1)
  return(log_likelihood)
}

ll_value <- log_likelihood(slx_model_Bergen_k3)
print(ll_value)
```

```{r}
slx_model_Bergen_k10 <- lmSLX(Modell_Bergen,
                                 data = Bergen_sf,
                                 listw = Analyse_W10_red,
                                 Durbin = as.formula(~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km))
                               )
```

```{r eval=FALSE}
log_likelihood <- function(slx_model_Bergen_k10) {
  n <- length(slx_model_Bergen_k10$residuals)
  sigma2 <- sum(slx_model_Bergen_k10$residuals^2) / n
  log_likelihood <- -0.5 * n * (log(2 * pi) + log(sigma2) + 1)
  return(log_likelihood)
}

ll_value <- log_likelihood(slx_model_Bergen_k10)
print(ll_value)
```

```{r}
slx_model_Generell_k3 <- lmSLX(Modell_Generell,
                                 data = Analyse_sf,
                                 listw = Analyse_W3,
                                 Durbin = as.formula(~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km))
                               )
```

```{r eval=FALSE}
log_likelihood <- function(slx_model_Generell_k3) {
  n <- length(slx_model_Generell_k3$residuals)
  sigma2 <- sum(slx_model_Generell_k3$residuals^2) / n
  log_likelihood <- -0.5 * n * (log(2 * pi) + log(sigma2) + 1)
  return(log_likelihood)
}

ll_value <- log_likelihood(slx_model_Generell_k3)
print(ll_value)
```

```{r}
slx_model_Generell_k10 <- lmSLX(Modell_Generell,
                                 data = Analyse_sf,
                                 listw = Analyse_W10,
                                 Durbin = as.formula(~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km))
                               )
```

```{r eval=FALSE}
log_likelihood <- function(slx_model_Generell_k10) {
  n <- length(slx_model_Generell_k10$residuals)
  sigma2 <- sum(slx_model_Generell_k10$residuals^2) / n
  log_likelihood <- -0.5 * n * (log(2 * pi) + log(sigma2) + 1)
  return(log_likelihood)
}

ll_value <- log_likelihood(slx_model_Generell_k10)
print(ll_value)
```

### Summary av SLX-modeller

```{r}
cat("Summary for SLX Model - Bergen, K3:\n")
summary(slx_model_Bergen_k3)
AIC(slx_model_Bergen_k3)
BIC(slx_model_Bergen_k3)
```

```{r}
cat("Summary for SLX Model - Bergen, K10:\n")
summary(slx_model_Bergen_k10)
AIC(slx_model_Bergen_k10)
BIC(slx_model_Bergen_k10)
```

```{r}
cat("Summary for SLX Model - Generell, K3:\n")
summary(slx_model_Generell_k3)
AIC(slx_model_Generell_k3)
BIC(slx_model_Generell_k3)
```

```{r}
cat("Summary for SLX Model - Generell, K10:\n")
summary(slx_model_Generell_k10)
AIC(slx_model_Generell_k10)
BIC(slx_model_Generell_k10)
```

### Impacts, Morantest & Plot av SLX-modeller

#### SLX, Bergen, K3

```{r}
summary(impacts(slx_model_Bergen_k3), z.values = TRUE)
```

```{r}
lm.morantest(slx_model_Bergen_k3,
             listw = Analyse_W3_red,
             alternative = "greater",
             resfun = residuals,
             naSubset = TRUE
             )
```

```{r eval=FALSE}
moran.plot(residuals(slx_model_Bergen_k3), listw = Analyse_W3_red)
```

#### SLX, Bergen, K10

```{r}
summary(impacts(slx_model_Bergen_k10), z.values = TRUE)
```

```{r}
lm.morantest(slx_model_Bergen_k10,
             listw = Analyse_W10_red,
             alternative = "greater",
             resfun = residuals,
             naSubset = TRUE
             )
```

```{r eval=FALSE}
moran.plot(residuals(slx_model_Bergen_k10), listw = Analyse_W10_red)
```

#### SLX, Generell, K3

```{r}
summary(impacts(slx_model_Generell_k3), z.values = TRUE)
```

```{r}
lm.morantest(slx_model_Generell_k3,
             listw = Analyse_W3,
             alternative = "greater",
             resfun = residuals,
             naSubset = TRUE
             )
```

```{r eval=FALSE}
moran.plot(residuals(slx_model_Generell_k3), listw = Analyse_W3)
```

#### SLX, Generell, K10

```{r}
summary(impacts(slx_model_Generell_k10), z.values = TRUE)
```

```{r}
lm.morantest(slx_model_Generell_k10,
             listw = Analyse_W10,
             alternative = "greater",
             resfun = residuals,
             naSubset = TRUE
             )
```

```{r eval=FALSE}
moran.plot(residuals(slx_model_Generell_k10), listw = Analyse_W10)
```

## SDM (Spatial Durbin Modell)

### SDM-Modellene

```{r}
#SDM_modell_Bergen_K3 <- lagsarlm(Modell_Bergen,
#                                   data = Bergen_sf,
#                                   listw = Analyse_W3_red,
#                                   Durbin = as.formula(~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km)),
#                                   type = "mixed")
```

```{r}
SDM_modell_Bergen_K3 <- lagsarlm(Modell_Bergen,
                                   data = Bergen_sf,
                                   listw = Analyse_W3_red,
                                   Durbin = TRUE,
                                   type = "mixed")
```

```{r}
SDM_modell_Bergen_K10 <- lagsarlm(Modell_Bergen,
                                   data = Bergen_sf,
                                   listw = Analyse_W10_red,
                                   Durbin = TRUE,
                                   type = "mixed")
```

```{r eval=FALSE}
SDM_modell_Bergen_K15 <- lagsarlm(Modell_Bergen,
                                   data = Bergen_sf,
                                   listw = Analyse_W15_red,
                                   Durbin = as.formula(~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km)),
                                   type = "mixed")
```

```{r}
SDM_modell_Generell_K3 <- lagsarlm(Modell_Generell,
                                   data = Analyse_sf,
                                   listw = Analyse_W3,
                                   Durbin = TRUE,
                                   type = "mixed")
```

```{r}
SDM_modell_Generell_K10 <- lagsarlm(Modell_Generell,
                                   data = Analyse_sf,
                                   listw = Analyse_W10,
                                   Durbin = TRUE,
                                   type = "mixed")
```

```{r eval=FALSE}
SDM_modell_Generell_K15 <- lagsarlm(Modell_Generell,
                                   data = Analyse_sf,
                                   listw = Analyse_W15,
                                   Durbin = as.formula(~ EL.Kar.Original + log(Alder+1) + O.Karak + log(BLEnergikWh) + MatValg + log(AntallRom) + log(AntallBad) + log(AntallWC) + HarHeis + YearQuarter + log(Bruksareal.Enhet) + log(dist_cbd_km)),
                                   type = "mixed")
```

### Summary av SDM-modellene

```{r}
cat("Summary for SDM Model - Bergen, K3:\n")
summary(SDM_modell_Bergen_K3)
```

```{r}
cat("Summary for SDM Model - Bergen, K10:\n")
summary(SDM_modell_Bergen_K10)
```

```{r eval=FALSE}
cat("Summary for SDM Model - Bergen, K15:\n")
summary(SDM_modell_Bergen_K15)
```

```{r}
cat("Summary for SDM Model - Generell, K3:\n")
summary(SDM_modell_Generell_K3)
```

```{r}
cat("Summary for SDM Model - Generell, K10:\n")
summary(SDM_modell_Generell_K10)
```

```{r eval=FALSE}
cat("Summary for SDM Model - Generell, K15:\n")
summary(SDM_modell_Generell_K15)
```

### Impacts av SDM-modellene

#### SDM, Bergen, K10

```{r}
impacts(SDM_modell_Bergen_K10, listw = Analyse_W10_red)
```

#### SDM, Generell, K10

```{r}
impacts(SDM_modell_Generell_K10, listw = Analyse_W10)
```

### Morans I for SDM

```{r}
resid_model <- residuals(SDM_modell_Bergen_K10)
moran.test(resid_model, listw = Analyse_W10_red)
```

```{r}
resid_model <- residuals(SDM_modell_Generell_K10)
moran.test(resid_model, listw = Analyse_W10)
```

### Moran's Plot for SDM

```{r}
moran.plot(residuals(SDM_modell_Bergen_K3), listw = Analyse_W3_red)
```

```{r}
moran.plot(residuals(SDM_modell_Bergen_K10), listw = Analyse_W10_red)
```

```{r}
moran.plot(residuals(SDM_modell_Generell_K3), listw = Analyse_W3)
```

```{r}
moran.plot(residuals(SDM_modell_Generell_K10), listw = Analyse_W10)
```

## BIC-verdier for sentrale modeller

```{r}
BIC(sem_model_Bergen_k3)
```

```{r}
BIC(sem_model_Generell_k3)
```

```{r}
BIC(SDM_modell_Bergen_K10)
```

```{r}
BIC(SDM_modell_Generell_K10)
```

# Tester modellene, for å finne hvilken som er mest aktuell

## Tester Bergen, K3

```{r eval=FALSE}
lmtest::lrtest(sar_model_Bergen_k3, sem_model_Bergen_k3, slx_model_Bergen_k3, SDM_modell_Bergen_K3)
```
sac_model_Bergen_K3, 
## Tester Bergen, K10

```{r eval=FALSE}
lmtest::lrtest(sar_model_Bergen_k10, sem_model_Bergen_k10, slx_model_Bergen_k10, SDM_modell_Bergen_K10)
```
sac_model_Bergen_K10, 
## Tester Generell, K3

```{r eval=FALSE}
lmtest::lrtest(sar_model_generell_k3, sem_model_Generell_k3, slx_model_Generell_k3, SDM_modell_Generell_K3)
```
sac_model_Generell_K3, 
## Tester Generell, K10

```{r eval=FALSE}
lmtest::lrtest(sar_model_generell_k10, sem_model_Generell_k10, slx_model_Generell_k10, SDM_modell_Generell_K10)
```
sac_model_Generell_K10, 


# Temp Slutt

```{r eval=FALSE}
Bergen_sf_Etter_Krise %>% 
  count(O.Karak)
```


```{r eval=FALSE}
# Sammenligner SAR model med SEM model
lrtest_sar_vs_sem <- lrtest(sar_model, sem_model)
cat("\nLR test for SAR vs. SEM:\n")
print(lrtest_sar_vs_sem)

# Sammenligner SAR model med SAC model
lrtest_sar_vs_sac <- lrtest(sar_model, sac_model)
cat("\nLR test for SAR vs. SAC:\n")
print(lrtest_sar_vs_sac)

# Sammenligner SAR model med Spatial Durbin model
lrtest_sar_vs_durbin <- lrtest(sar_model, durbin_model)
cat("\nLR test for SAR vs. Spatial Durbin:\n")
print(lrtest_sar_vs_durbin)

# Sammenligner SEM model med SAC model
lrtest_sem_vs_sac <- lrtest(sem_model, sac_model)
cat("\nLR test for SEM vs. SAC:\n")
print(lrtest_sem_vs_sac)

# Sammenligner SEM model med Spatial Durbin model
lrtest_sem_vs_durbin <- lrtest(sem_model, durbin_model)
cat("\nLR test for SEM vs. Spatial Durbin:\n")
print(lrtest_sem_vs_durbin)

# Sammenligner SAC model med Spatial Durbin model
lrtest_sac_vs_durbin <- lrtest(sac_model, durbin_model)
cat("\nLR test for SAC vs. Spatial Durbin:\n")
print(lrtest_sac_vs_durbin)
```

